var formSubmitting = false;
var setFormSubmitting = function() { formSubmitting = true; };

window.onload = function() {
    window.addEventListener("beforeunload", function (e) {
        if (formSubmitting) {
            return undefined;
        }

        var confirmationMessage = 'It looks like you have been editing something. '
                                + 'If you leave before saving, your changes will be lost.';

        (e || window.event).returnValue = confirmationMessage; //Gecko + IE
        return confirmationMessage; //Gecko + Webkit, Safari, Chrome etc.
    });
};

JSLoader.spinnerStart().loadModules(["designer"]);

function startDebugger() {
    debugger
}
var mbd = {
        property: null,
        fontHelper: null,
        toolbar: null,
        propertyEditor: null,
        defautls: {
            font: {
                font: "normal normal normal 32px Arial",
                colour: "#000"
            }
        },
        data: {
            model: null,
            collection: null
        },
        cursor: {
            normal: "crosshair",
            move: "move",
            resize: "nesw-resize",
            resize_x: "ns-resize",
            resize_y: "ew-resize"
        },
        shifted: !1,
        ctrled: !1
    },
    designer;
$(document).on("keyup keydown", function(e) {
    mbd.shifted = e.shiftKey;
    mbd.ctrled = e.ctrlKey;
    mbd.shifted ? document.getElementById("key-shift").classList.add("alert-success") : document.getElementById("key-shift").classList.remove("alert-success");
    mbd.ctrled ? document.getElementById("key-ctrl").classList.add("alert-success") : document.getElementById("key-ctrl").classList.remove("alert-success")
});
JSLoader.ready(function() {
    mbd.logger = Logger.get("Canvas");
    mbd.logger.setLevel(Logger.getDEBUG());
    var e;
    e = {};
    e.input = _.template("<div class='md-property'>\n\t\t\t\t<span class='text-capitalize'><%=property%></span>\n\t\t\t\t<input class='md-input prop-<%=property%>' id='prop-<%=property%>' type='<%=type%>' value='<%=value%>'<%=minMax%>/>\n\t\t\t</div>");
    designer = new Designer;
    designer.canvas.mouse.cursor(mbd.cursor.normal);
    document.getElementById("gridSnap").value = designer.gridscene.snapTo;
    document.getElementById("gridLines").addEventListener("click",
        function() {
            designer.gridscene.visible = this.checked
        });
    jscolor.installByClassName("shadow-colour");
    $("input[type=number]").on("change", function() {
        value = valueTest = 1 * $(this).val();
        isNaN(valueTest) && (valueTest = valvalueTestue.replace(/\D/g, ""));
        "" == valueTest && (valueTest = (dValue = $(this).data("default")) ? dValue : this.min);
        valueTest < this.min && (valueTest = this.min);
        valueTest > this.max && (valueTest = this.max);
        valueTest != value && $(this).val(valueTest);
        "gridSnap" == this.id && designer.gridscene.createGrid({
            snapTo: 1 * valueTest
        });
        "canvasZoom" == this.id && ($("#canvas").css("width", $(this).data("width") / (100 / valueTest)), $("#canvas").css("height", $(this).data("height") / (100 / valueTest)))
    });
    mbd.fontHelper = new function() {
        this.fontString = null;
        this.fontBold = this.fontOblique = this.fontItalic = "normal";
        this.fontPx = "px";
        this.fontSize = 32;
        this.fontFamily = "Arial";
        this.fonts = "Arial;Comic Sans MS;Courier New;Georgia;Impact;Times New Roman;Trebuchet MS;Verdana".split(";");
        this.fonts = uf.concat(this.fonts);
        this.getFontArray = function(a) {
            "string" ===
            typeof a && (frontArray = a.split(" "), 5 < frontArray.length && (subPart = frontArray.splice(4, frontArray.length), frontArray.push(subPart.join(" "))), 0 <= this.fonts.indexOf(frontArray[4]) && 1 <= frontArray[3].indexOf("px") ? (this.fontItalic = frontArray[0], this.fontOblique = frontArray[1], this.fontBold = frontArray[2], this.fontPx = frontArray[3].substring(frontArray[3].indexOf("px")), this.fontSize = frontArray[3] = frontArray[3].replace(this.fontPx, ""), this.fontFamily = frontArray[4]) : delete frontArray);
            "undefined" !== typeof frontArray &&
                Array.isArray(frontArray) || (frontArray = [this.fontItalic, this.fontOblique, this.fontBold, this.fontSize.toString(), this.fontFamily]);
            return frontArray
        };
        this.getFontString = function(a) {
            "undefined" !== typeof a && Array.isArray(a) || (a = [], a.push(this.fontItalic, this.fontOblique, this.fontBold, this.fontSize.toString(), this.fontFamily));
            a[3] += this.fontPx;
            return this.fontString = a.join(" ")
        };
        this.getFontArray(mbd.defautls.font.font)
    };
    mbd.toolbar = new function() {
        function a(a, c) {
            this.trigger(a, c)
        }
        _.extend(this, Backbone.Events);
        var c = Backbone.Model.extend({
                idAttribute: "type",
                debug: !1,
                defaults: {
                    type: null,
                    group: "",
                    title: null,
                    icon: null,
                    text: "",
                    disabled: !1
                },
                initialize: function() {
                    this.on("add", function(a) {
                        this.log("Button::Add::" + a.attributes.id)
                    });
                    this.on("change", function(a, c) {
                        this.log("Button::change::" + a.attributes.id)
                    });
                    this.on("remove", function(a, c) {
                        this.log("Button::remove::" + a.attributes.id)
                    })
                },
                log: function(a) {
                    !0 === this.debug && console.log(a)
                }
            }),
            b = Backbone.View.extend({
                tagName: "button",
                className: "toolbar btn btn-default ",
                debug: !1,
                events: {
                    click: "onClick"
                },
                initialize: function() {},
                render: function() {
                    this.$el.html(this.template(this.model.attributes));
                    this.model.attributes.disabled && this.$el.addClass("disabled");
                    $("#group-" + this.model.attributes.group).append(this.$el);
                    return this
                },
                template: _.template('<span data-toggle="tooltip" data-placement="bottom" title="<%=title%>" class="" data-type="<%=type%>">\n\t\t\t\t\t\t<span style="padding-left: 3px;"><img alt="" src="/images/designer/toolbar/<%=icon%>.png" class="btn-designer animated infinite"></span>\n\t\t\t\t\t</span>'),
                onClick: function() {
                    this.trigger("click", this.model.attributes);
                    this.log("viewGroupFile::click");
                    this.log(this)
                },
                setState: function(a) {
                    a ? (this.el.classList.remove("btn-default"), this.el.classList.add("btn-danger")) : (this.el.classList.remove("btn-danger"), this.el.classList.add("btn-default"))
                },
                log: function(a) {
                    !0 === this.debug && console.log(a)
                }
            });
        this.vSave = new b({
            model: new c({
                type: "save",
                group: "file",
                title: "Save [ALT+SHIFT+S]",
                icon: "save",
                disabled: !1
            })
        });
        this.listenTo(this.vSave, "all", a);
        this.vSave.render();
        var d = new b({
                model: new c({
                    type: "text",
                    group: "objects",
                    title: "Text [CTRL+SHIFT+T]",
                    icon: "text",
                    text: "Text"
                })
            }),
            f = new b({
                model: new c({
                    type: "line",
                    group: "objects",
                    title: "Line [CTRL+SHIFT+L]",
                    icon: "line",
                    text: "Line"
                })
            }),
            e = new b({
                model: new c({
                    type: "image",
                    group: "objects",
                    title: "Image [CTRL+SHIFT+I]",
                    icon: "image",
                    text: "Image"
                })
            });
        this.listenTo(d, "all", a);
        this.listenTo(f, "all", a);
        this.listenTo(e, "all", a);
        d.render();
        f.render();
        e.render();
        c = new b({
            model: new c({
                type: "info",
                group: "info",
                title: "Info",
                icon: "info",
                text: ""
            })
        });
        this.listenTo(c, "all", a);
        c.render()
    };
    mbd.propertyEditor = new function() {
        _.extend(this, Backbone.Events);
        $(".property-editor").hide();
        $(".shadow-heading").hide();
        this.priotity = {
            EMERG: 0,
            ALERT: 1,
            CRIT: 2,
            ERR: 3,
            WARN: 4,
            NOTICE: 5,
            INFO: 6,
            DEBUG: 7
        };
        this.activity = {
            propertybar: !1,
            verbosity: this.priotity.DEBUG
        };
        this.caps = ["butt", "round", "square"];
        this.waitForUI = function(a) {
            mbd.propertyEditor.activity.propertybar ? setTimeout(function() {
                mbd.propertyEditor.waitForUI()
            }, 100) : a && (mbd.propertyEditor.activity.propertybar = !0)
        };
        this.propertyBarCreate = function(a) {
            this.waitForUI(!0);
            if (a && a.hasOwnProperty("core")) {
                if ("text" === a.type) {
                    var c = mbd.fontHelper.getFontArray(a.font),
                        c = mbd.fontHelper.fonts.indexOf(c[4]);
                    bold = !1;
                    "bold" === mbd.fontHelper.fontBold && (bold = !0);
                    italic = !1;
                    "italic" === mbd.fontHelper.fontItalic && (italic = !0);
                    oblique = !1;
                    "oblique" === mbd.fontHelper.fontOblique && (oblique = !0);
                    this.propertyAddInput("text", a.text, "text");
                    this.propertyAddInput("size", mbd.fontHelper.fontSize, "number");
                    this.propertyAddInput("colour",
                        a.fill, "text");
                    this.propertyAddSelect("font", c, "number", mbd.fontHelper.fonts);
                    this.propertyAddCheckbox("bold", bold);
                    this.propertyAddCheckbox("italic", italic);
                    jscolor.installByClassName("prop-colour");
                    this.updateShadow(a.shadow)
                } else if ("line" === a.type) {
                    var c = mbd.propertyEditor.caps.indexOf(a.cap),
                        b = a.stroke.split(" ");
                    this.propertyAddInput("size", b[0].replace("px", ""), "number");
                    this.propertyAddInput("colour", b[1], "text");
                    this.propertyAddSelect("cap", c, "number", mbd.propertyEditor.caps);
                    jscolor.installByClassName("prop-colour");
                    this.updateShadow(a.shadow)
                } else "image" === a.type && this.updateShadow(a.shadow);
                this.updatePosition(a);
                this.propertyAddInput("rotation", a.rotation, "number");
                this.propertyAddInput("layer", a.zIndex - designer.gridscene.lines, "number");
                $("#property-type").text(a.type);
                $("#property-type").data("id", a.id);
                $(".property-editor").is(":visible") || $(".property-editor").toggle("slide");
                this.activity.propertybar = !1
            }
        };
        this.propertyBarDestroy = function(a) {
            this.waitForUI(!0);
            $(".property-editor").is(":visible") ? $(".property-editor").toggle("slide",
                function() {
                    $(".property-list").empty();
                    $("#property-type").text("");
                    $("#property-type").attr("data-id", "");
                    $(".shadow-heading").hide();
                    mbd.propertyEditor.activity.propertybar = !1;
                    a && a()
                }) : (this.activity.propertybar = !1, a && a())
        };
        this.propertyBarIsEmpty = function() {
            this.waitForUI();
            return "" === $("#property-type").text() ? !0 : !1
        };
        this.updateShadow = function(a) {
            $("#shadow-x").val(a.offsetX);
            $("#shadow-y").val(a.offsetY);
            $("#shadow-blur").val(a.blur);
            $("#shadow-colour").val(a.color.replaceAll("#", ""));
            $("#shadow-colour").css("backgroundColor",
                a.color);
            $(".shadow-heading").show()
        };
        this.updatePosition = function(a) {
            $("#position-x").val(a.x);
            $("#position-y").val(a.y);
            $("#position-width").val(a.width);
            $("#position-height").val(a.height);
            $(".position-heading").show()
        };
        this.propertyAddInput = function(a, c, b) {
            this.waitForUI(!0);
            minMax = null;
            "layer" === a && (minMax = " min='0' max='" + (designer.menuscene.widgets.length - 1) + "' ");
            $(".property-list").append(e.input({
                property: a,
                type: b,
                value: c,
                minMax: minMax
            }));
            this.activity.propertybar = !1
        };
        this.propertyAddSelect =
            function(a, c, b, d) {
                this.waitForUI(!0);
                $(".property-list").append("<div class='md-property'><span class='text-capitalize'>" + a + "</span><select class='md-input' id='prop-" + a + "' type='" + b + "' /></div>");
                "image" === b ? I.getUrl("/image-gallery/files").then(function(b) {
                        files = JSON.parse(b);
                        files.files && ($.each(files.files, function(c, b) {
                            $("#prop-" + a).append($("<option>", {
                                value: b.filelink
                            }).text(b.filename.substring(0, b.filename.length - 4)))
                        }), $("#prop-" + a + " option[value='" + c + "']").attr("selected", "selected"))
                    },
                    function(a) {
                        console.error("Failed!", a)
                    }) : ($.each(d, function(c, b) {
                    $("#prop-" + a).append($("<option>", {
                        value: c
                    }).text(b))
                }), $("#prop-" + a + " option[value=" + c + "]").attr("selected", "selected"));
                this.activity.propertybar = !1
            };
        this.propertyAddCheckbox = function(a, c) {
            this.waitForUI(!0);
            checked = "";
            c && (checked = "checked");
            $(".property-list").append("<div class='md-property'><label for='prop-" + a + "' class='text-capitalize'>" + a + "</label><input class='md-input prop-" + a + " pull-right' id='prop-" + a + "' type='checkbox' " +
                checked + " /></div>");
            this.activity.propertybar = !1
        };
        $("#property-apply").click(function() {
            if ("text" === mbd.property.type) mbd.property.text = $("#prop-text").val(), mbd.fontHelper.getFontArray(mbd.property.font), mbd.fontHelper.fontSize = $("#prop-size").val(), mbd.fontHelper.fontFamily = $("#prop-font option:selected:selected").text(), mbd.fontHelper.fontBold = $("#prop-bold").is(":checked") ? "bold" : "normal", mbd.fontHelper.fontItalic = $("#prop-italic").is(":checked") ? "italic" : "normal", mbd.property.fill = "#" + $("#prop-colour").val(),
                mbd.property.font = mbd.fontHelper.getFontString();
            else if ("line" === mbd.property.type) {
                var a = [];
                a.push($("#prop-size").val() + "px");
                a.push("#" + $("#prop-colour").val());
                mbd.property.stroke = a.join(" ");
                mbd.property.cap = $("#prop-cap option:selected:selected").text()
            }
            mbd.property.x = 1 * $("#position-x").val();
            mbd.property.y = 1 * $("#position-y").val();
            mbd.property.rotation = parseInt($("#prop-rotation").val());
            a = $("#shadow-colour").val();
            "transparent" !== a && (a = "#" + a);
            mbd.property.shadow = $("#shadow-x").val() + " " +
                $("#shadow-y").val() + " " + $("#shadow-blur").val() + " " + a;
            mbd.property.zIndex = parseInt($("#prop-layer").val()) + designer.gridscene.lines;
            mbd.property.redraw();
            designer.dirty = !0;
            mbd.propertyEditor.trigger("apply", mbd.property);
            designer.layereditor.layersUpdate()
        });
        $("#property-delete").click(function() {
            null !== mbd.property && mbd.propertyEditor.propertyBarDestroy();
            designer.menuscene.removeWidget(mbd.property);
            mbd.propertyEditor.trigger("delete", mbd.property);
            designer.layereditor.layersUpdate();
            mbd.propertyEditor.selectWidget()
        });
        this.vInfoEdit = null;
        this.getModel = function(a) {
            null === mbd.data.model && (mbd.data.model = new Menu(a), this.listenTo(mbd.data.model, "sync", this.saved))
        };
        this.showInfo = function() {
            jsonCollection = designer.menuscene.serializeScene();
            mbd.propertyEditor.getModel();
            mbd.data.model.set("itemdata", jsonCollection);
            mbd.propertyEditor.vInfoEdit = new InfoView({
                el: $(".modal-body"),
                model: mbd.data.model
            });
            mbd.propertyEditor.vInfoEdit.render();
            $("#edit-info").modal("show")
        };
        this.listenTo(mbd.toolbar, "all", function(a, c) {
            if ("file" ==
                c.group) switch (c.type) {
                case "save":
                    mbd.propertyEditor.saveCanvas()
            } else "objects" == c.group ? "image" == c.type ? mbd.propertyEditor.updateImageSelect() : mbd.propertyEditor.addDisplayObject(c.type) : "info" == c.group && mbd.propertyEditor.showInfo()
        });
        this.handleMdWidgetClick = function() {
            if (mbd.propertyEditor.propertyBarIsEmpty() || this.id !== $("#property-type").data("id")) mbd.propertyEditor.selectWidget(this), mbd.propertyEditor.propertyBarDestroy(function() {
                mbd.propertyEditor.propertyBarCreate(mbd.property)
            })
        };
        this.addWidgetOutline =
            function(a) {
                var c = designer.canvas.display.rectangle({
                    x: 0,
                    y: 0,
                    origin: {
                        x: "left",
                        y: "top"
                    },
                    width: a.width,
                    height: a.height,
                    stroke: "outside 2px rgba(0, 0, 0, 0.5)"
                });
                a.addChild(c)
            };
        this.selectWidget = function(a) {
            null !== mbd.property && void 0 !== mbd.property && (0 < mbd.property.children.length && (mbd.property.removeChildAt(0), null !== document.getElementById("tl" + mbd.property.id) && (document.getElementById("tl" + mbd.property.id).classList.remove("active"), $(document.getElementById("tl" + mbd.property.id)).children("i").addClass("hide"))),
                mbd.property = null);
            void 0 !== a ? a.hasOwnProperty("core") && (mbd.propertyEditor.addWidgetOutline(a), document.getElementById("tl" + a.id).classList.add("active"), $(document.getElementById("tl" + a.id)).children("i").removeClass("hide"), mbd.property = a) : (mbd.property = null, mbd.propertyEditor.propertyBarDestroy())
        };
        this.updateCursor = function(a) {
            designer.canvas.mouse.cursor(mbd.cursor.move);
            if ("line" == a.type) {
                var c = a.length / 4 ^ 2,
                    b = mbd.propertyEditor.getDistance(a.parent.mouse, a.start);
                "move" != (mbd.propertyEditor.getDistance(a.parent.mouse,
                    a.end) <= c ? "start" : b >= a.length - c ? "end" : "move") && (mbd.shifted ? designer.canvas.mouse.cursor(mbd.cursor.resize_x) : mbd.ctrled ? designer.canvas.mouse.cursor(mbd.cursor.resize_y) : designer.canvas.mouse.cursor(mbd.cursor.resize))
            }
        };
        this.handleMdWidgetMouseEnter = function(a) {
            mbd.propertyEditor.updateCursor(this)
        };
        this.handleMdWidgetMouseMove = function(a) {
            mbd.propertyEditor.updateCursor(this)
        };
        this.handleMdWidgetMouseLeave = function(a) {
            designer.canvas.mouse.cursor(mbd.cursor.normal)
        };
        this.getDistance = function(a,
            c) {
            var b = (a.x - c.x ^ 2) + (a.y - c.y ^ 2);
            0 > b && (b = mbd.propertyEditor.getDistance(c, a));
            return b
        };
        this.dragAndDrop = function(a) {
            a.dragAndDrop({
                bubble: !1,
                start: function() {
                    this.opacity = .5;
                    designer.canvas.mouse.cursor(mbd.cursor.move);
                    if ("line" == this.type) {
                        var a = this.length / 4 ^ 2,
                            b = {
                                x: Math.round(this.parent.mouse.x),
                                y: Math.round(this.parent.mouse.y)
                            },
                            d = mbd.propertyEditor.getDistance(b, this.start),
                            b = mbd.propertyEditor.getDistance(b, this.end),
                            a = d <= a ? "start" : b <= a ? "end" : "move";
                        "move" != a && (mbd.shifted ? designer.canvas.mouse.cursor(mbd.cursor.resize_x) :
                            mbd.ctrled ? designer.canvas.mouse.cursor(mbd.cursor.resize_y) : designer.canvas.mouse.cursor(mbd.cursor.resize));
                        mbd.line = {
                            action: a,
                            start: {
                                x: this.start.x,
                                y: this.start.y
                            },
                            end: {
                                x: this.end.x,
                                y: this.end.y
                            }
                        }
                    }
                },
                move: function() {
                    this.opacity = .2;
                    this.x = 0 > this.x ? 0 : this.x;
                    this.y = 0 > this.y ? 0 : this.y;
                    this.x = this.x > this.parent.width - this.width ? this.parent.width - this.width : this.x;
                    this.y = this.y > this.parent.height - this.height ? this.parent.height - this.height : this.y;
                    if ("line" == this.type && "move" != mbd.line.action) {
                        var a, b,
                            d, e;
                        "start" == mbd.line.action ? (a = this.end, b = mbd.line.end, d = this.start, e = mbd.line.start) : "end" == mbd.line.action && (a = this.start, b = mbd.line.start, d = this.end, e = mbd.line.end);
                        mbd.shifted ? (d.x = e.x, d.y = Math.round(designer.canvas.mouse.y / designer.gridscene.snapTo) * designer.gridscene.snapTo) : mbd.ctrled ? (d.y = e.y, d.x = Math.round(designer.canvas.mouse.x / designer.gridscene.snapTo) * designer.gridscene.snapTo) : (d.x = Math.round(designer.canvas.mouse.x / designer.gridscene.snapTo) * designer.gridscene.snapTo, d.y = Math.round(designer.canvas.mouse.y /
                            designer.gridscene.snapTo) * designer.gridscene.snapTo);
                        a.x = b.x;
                        a.y = b.y
                    }
                    $("#position-x").val(Math.round(this.x));
                    $("#position-y").val(Math.round(this.y))
                },
                end: function() {
                    "line" !== this.type && document.getElementById("gridEnabled").checked && (this.x = Math.round(this.x / designer.gridscene.snapTo) * designer.gridscene.snapTo, this.y = Math.round(this.y / designer.gridscene.snapTo) * designer.gridscene.snapTo, this.x = this.x + this.width > this.parent.width ? this.x - designer.gridscene.snapTo : this.x, this.y = this.y + this.height >
                        this.parent.height ? this.y - designer.gridscene.snapTo : this.y);
                    this.opacity = 1;
                    designer.canvas.mouse.cursor(mbd.cursor.normal);
                    mbd.property && this.id == mbd.property.id && $("#position-x").val() != this.x && $("#position-y").val() != this.y && (designer.dirty = !0);
                    $("#position-x").val(this.x);
                    $("#position-y").val(this.y);
                    this.trigger("move", this)
                }
            })
        };
        this.updateImageSelect = function() {
            I.getUrl("/image-gallery/files").then(function(a) {
                    files = JSON.parse(a);
                    files.files && (document.getElementById("image-picker").innerHTML =
                        "", $.each(files.files, function(a, b) {
                            "wmv" !== b.filename.split(".").pop() && $("#image-picker").append($("<option>", {
                                value: b.filelink,
                                "data-img-src": b.filelink,
                                "data-img-label": b.filename + " (" + b.width + "x" + b.height + ")"
                            }).text(b.filename.substring(0, b.filename.length - 4)))
                        }), $("#image-picker-modal").fadeIn(1E3), $("#image-picker").imagepicker({
                            hide_select: !1,
                            show_label: !0,
                            selected: function(a) {
                                $("#image-picker-modal").fadeOut(1E3);
                                mbd.propertyEditor.addDisplayObject("image", a.option.data("img-src"))
                            }
                        }))
                },
                function(a) {
                    console.error("Failed!", a)
                })
        };
        this.addDisplayObject = function(a, c, b) {
            y = x = designer.gridscene.snapTo;
            newX = 0;
            if ("undefined" === typeof b)
                for (i = 0; i < designer.menuscene.widgets.length; i++) b = designer.menuscene.widgets[i], b.pointerEvents && (0 === newX && (newX = designer.gridscene.nextGridLine(b.x + b.width)), y == b.y && (y = designer.gridscene.nextGridLine(y + b.height), y >= designer.canvas.height - designer.gridscene.snapTo && (y = designer.gridscene.snapTo, x = Math.round(newX / designer.gridscene.snapTo) * designer.gridscene.snapTo,
                    newX = 0)));
            b = {
                type: a,
                x: x,
                y: y,
                origin: {
                    x: "left",
                    y: "top"
                }
            };
            switch (a) {
                case "text":
                    textString = c || "Object field " + (designer.menuscene.widgets.length + 1);
                    b.font = mbd.defautls.font.font;
                    b.text = window.prompt("Text:", textString);
                    b.fill = mbd.defautls.font.colour;
                    b.text || (b = null);
                    break;
                case "line":
                    b.start = {
                        x: x,
                        y: y
                    };
                    b.end = {
                        x: x + 200,
                        y: y
                    };
                    b.stroke = "30px #000";
                    b.cap = "butt";
                    break;
                case "image":
                    b.image = c;
                    break;
                default:
                    designer.notice("Still working on object " + a, "warning"), b = null
            }
            null !== b && (designer.menuscene.addWidget(b),
                designer.layereditor.layersUpdate())
        };
        this.saved = function(a, c, b) {};
        this.loadScreen = function(a) {
            mbd.propertyEditor.getModel({
                id: a
            });
            mbd.data.model.fetch({
                success: function(a, b, d) {
                    document.getElementById("gridSnap").value != a.get("grid") && (document.getElementById("gridSnap").value = a.get("grid"), designer.gridscene._createGrid({
                        snapTo: 1 * a.get("grid")
                    }));
                    jsonData = a.get("itemdata");
                    background = a.get("background");
                    fk_clients = a.get("fk_clients");
                    background && (designer.layout.backgroundVideo = background);
                    collection = JSON.parse(jsonData) == null ? [] : JSON.parse(jsonData);
                    for (i = 0; i < collection.length; i++) designer.menuscene.addWidget(collection[i]);
                    designer.layereditor.layersUpdate();
                    designer.notice("Loaded " + mbd.data.model.get("name"), "success");
                    designer.dirty = !1
                }
            })
        };
        this.saveCanvas = function() {
            mbd.toolbar.vSave.el.getElementsByTagName("img")[0].classList.add("flash");
            mbd.propertyEditor.selectWidget();
            jsonCollection = designer.menuscene.serializeScene();

            mbd.propertyEditor.getModel();
            curData = mbd.data.model.get("itemdata");
			/*
            if (curData === jsonCollection &&
                !1 === designer.dirty) designer.notice("No modifications to save.", "info");
            else { */
			designer.notice("Saving...", "info");
			mbd.data.model.set("itemdata", jsonCollection);
			mbd.data.model.set("name", $('#menu_name').val());
			mbd.data.model.set("background", $('#menu_background').val());
			mbd.data.model.set("grid", designer.gridscene.snapTo);
			var a = document.getElementById("canvas").cloneNode(!0),
				c = a.getContext("2d");

			c.canvas.height *= .2;
			c.canvas.width *= .2;
			console.log(a);
			var backgroundimage = '';
			if($('#menu_background').val() == '' || $('#menu_background').val() == '__background-white.wmv') {
				backgroundimage = globalPath+'/images/designer/__background-white-snap.png';
			} else {
				image = $('#menu_background').val();
				backgroundimage = globalPath+'/media/clients/'+$("#canvas").data("clientid")+'/'+image.replace('.wmv', '-snap.png');
			}
			var img=new Image();
			img.src=backgroundimage;

			c.drawImage(img,0, 0, c.canvas.width, c.canvas.height);
			c.drawImage(document.getElementById("canvas"), 0, 0, c.canvas.width, c.canvas.height);

			/* Use normal ajax to make this call. */
			var newold = mbd.data.model.get("id") != '' ? mbd.data.model.get("id") : '';
			console.log('ID : '+newold+': MBD: '+mbd.data.model.get("id"));

			/* Send json encoded data, just so the preview image does not get screwed up by the code. */
			console.log($('#menu_background').val());
			var json = '[{"name":"'+$('#menu_name').val()+'","background":"'+$('#menu_background').val()+'","grid":"'+designer.gridscene.snapTo+'","itemdata":'+jsonCollection+',"preview":""}]';/* '+a.toDataURL("image/png")+' */
			console.log(json);
			console.log(newold);
			$.ajax({
				type: "POST",		
				contentType: 'application/json; charset=utf-8',				
				url: "/rest/menus/"+newold+'?action=addupdate',
				data: json,
				dataType: "json",
				success: function(data){
					console.log(data);
					if(data.result == 1) {
						console.log(newold);
						if(newold != '') {
							designer.notice("Menu has been updated!", "info");
						} else {
							designer.notice("Menu has been added!", "info");
						}						
						window.location.href = '/menus/';
					} else {
						designer.notice(data.message, "warning");
					}
				}
			});
            // }
			return false;
        };
        designer.on("dirty", function(a) {
            mbd.toolbar.vSave.setState(a.dirty)
        });
        $('[data-toggle="tooltip"]').tooltip()
    };
    shortcut.add("alt+shift+s", function() {
        mbd.propertyEditor.saveCanvas()
    });
    shortcut.add("ctrl+shift+g", function() {
        designer.gridscene.visible = document.getElementById("gridLines").checked = !document.getElementById("gridLines").checked
    });
    shortcut.add("ctrl+shift+s", function() {
        document.getElementById("gridEnabled").checked = !document.getElementById("gridEnabled").checked
    });
    shortcut.add("ctrl+shift+t", function() {
        mbd.propertyEditor.addDisplayObject("text")
    });
    shortcut.add("ctrl+shift+l", function() {
        mbd.propertyEditor.addDisplayObject("line")
    });
    shortcut.add("ctrl+shift+i", function() {
        mbd.propertyEditor.updateImageSelect()
    });
    shortcut.add("alt+shift+up", function() {
        document.getElementById("canvasZoom").value = 1 * document.getElementById("canvasZoom").value + 1 * document.getElementById("canvasZoom").step;
        document.getElementById("canvasZoom").dispatchEvent(new Event("change"))
    });
    shortcut.add("alt+shift+down", function() {
        document.getElementById("canvasZoom").value -= document.getElementById("canvasZoom").step;
        document.getElementById("canvasZoom").dispatchEvent(new Event("change"))
    });
    "" !== $("#canvas").data("id") ? mbd.propertyEditor.loadScreen($("#canvas").data("id")) : mbd.propertyEditor.showInfo();
    $(window).bind("beforeunload", function() {
        if (designer.dirty) return "You have unsaved Menu changes. Do you want to leave this Menu and discard your changes or stay on this page?"
    })
}, this);
//# sourceMappingURL=/js/routes/designer/canvas.min.map